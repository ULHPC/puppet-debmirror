#! /bin/bash
################################################################################
# run_ftpsync - run ftpsync over a given debian repository (either debian or 
#               debian-security) 
# Creation : 01 Apr 2010
# Time-stamp: <Thu 2010-04-01 11:22 svarrette>
#
# Copyright (c) 2010 Sebastien Varrette <Sebastien.Varrette@uni.lu>
#               http://varrette.gforge.uni.lu
# $Id$ 
#
# Description : see the print_help function or launch 'run_ftpsync --help'
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>. 
################################################################################

### Global variables
VERSION=0.1
COMMAND=`basename $0`
VERBOSE=""
DEBUG=""
SIMULATION=""

### displayed colors
COLOR_GREEN="\033[0;32m"
COLOR_RED="\033[0;31m"
COLOR_YELLOW="\033[0;33m"
COLOR_VIOLET="\033[0;35m"
COLOR_CYAN="\033[0;36m"
COLOR_BOLD="\033[1m"
COLOR_BACK="\033[0m"

### Local variables
DEBMIRROR_USER=debmirror
DEBMIRROR_HOMEDIR=/var/lib/${DEBMIRROR_USER}
FTPSYNC=${DEBMIRROR_HOMEDIR}/bin/ftpsync
FTPSYNC_CFG=${DEBMIRROR_HOMEDIR}/etc/ftpsync.conf


#######################
### print functions ###
#######################

####
# print version of this program
##
print_version() {
    cat <<EOF
This is $COMMAND version "$VERSION".
Copyright (c) 2010 Sebastien Varrette  (http://varrette.gforge.uni.lu)
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
EOF
}

####
# print help
##
print_help() {
cat <<EOF
NAME
	$COMMAND -- run ftpsync over a given debian repository (either debian or 
#                   debian-security

SYNOPSIS
	$COMMAND [-V | -h] debian 
	$COMMAND [-V | -h] debian-security	
	$COMMAND [--debug] [-v] [-n]

DESCRIPTION
	$COMMAND ensure the correct ftpsync configuration is used and run ftpsync (as 
        user ${DEBMIRROR_USER} with the sync:all option. 

OPTIONS
	--debug
		Debug mode. Causes $COMMAND to print debugging messages.
	-h --help
		Display a help screen and quit.
	-n --dry-run
		Simulation mode. 
	-v --verbose
		Verbose mode. 
	-V --version
		Display the version number then quit. 

FILES
        ${FTPSYNC_CFG}  
               the main configuration file of ftpsync. It will be a symbolic link to the 
               appropriate configuration file. 
        ${DEBMIRROR_HOMEDIR}/etc/ftpsync.debian.conf
               Specific configuration for the debian repository
        ${DEBMIRROR_HOMEDIR}/etc/ftpsync.debian-security.conf
               Specific configuration for the debian-security repository

AUTHOR
	Sebastien Varrette <Sebastien.Varrette@uni.lu>
	Web page: http://varrette.gforge.uni.lu 

REPORTING BUGS 
	Please report bugs to <Sebastien.Varrette@uni.lu>

COPYRIGHT
	This is free software; see the source for copying conditions.  There is
	NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR
	PURPOSE.
       
SEE ALSO	
        Setting up a Debian archive mirror: http://www.debian.org/mirror/ftpmirror
EOF
}

######
# Print information in the following form: '[$2] $1' ($2=INFO if not submitted)
# usage: info text [title]
##
info() {
    [ -z "$1" ] && print_error_and_exit "[$FUNCNAME] missing text argument"
    local text=$1
    local title=$2
    # add default title if not submitted but don't print anything 
    [ -n "$text" ] && text="${title:==>} $text"    
    echo -e $text
}
debug()   { [ -n "$DEBUG"   ] && info "$1" "[${COLOR_YELLOW}DEBUG${COLOR_BACK}]"; }
verbose() { [ -n "$VERBOSE" ] && info "$1"; }
error()   { info "$1" "[${COLOR_RED}ERROR${COLOR_BACK}]"; }
warning() { info "$1" "[${COLOR_VIOLET}WARNING${COLOR_BACK}]"; }
print_error_and_exit() {
    local text=$1
    [ -z "$1" ] && text=" Bad format"
    error  "$text. '$COMMAND -h' for help."
    exit 1
}
#####
# print the strings [ OK ] or [ FAILED ] or [ FAILED ]\n$1
##
print_ok()     { echo -e "[   ${COLOR_GREEN}OK${COLOR_BACK}   ]"; }
print_failed() { echo -e "[ ${COLOR_RED}FAILED${COLOR_BACK} ]"; }
print_failed_and_exit() { 
    print_failed
    [ ! -z "$1" ] && echo "$1"
    exit 1
}

#########################
### toolbox functions ###
#########################

#####
# execute a local command 
# usage: execute command
###
execute() {
    [ $# -eq 0 ] && print_error_and_exit "[$FUNCNAME] missing command argument"
    debug "[$FUNCNAME] $*"
    [ -n "${SIMULATION}" ] && echo "(simulation) $*" || eval $*
    local exit_status=$?
    debug "[$FUNCNAME] exit status: $exit_status"
    return $exit_status
}

####
# ask to continue. exit 1 if the answer is no
# usage: really_continue text
##
really_continue() {
    echo -e -n "[${COLOR_VIOLET}WARNING${COLOR_BACK}] $1 Are you sure you want to continue? [Y|n] "
    read ans
    case $ans in 
	n*|N*) exit 1;;
    esac
}

################################################################################
################################################################################
[ $UID -gt 0 ] && print_error_and_exit "You must be root to execute this script (current uid: $UID)"

# Check for required argument
#[ $# -eq 0 ] && print_error_and_exit

REPOSITORY="debian"

# Check for options
while [ $# -ge 1 ]; do
    case $1 in
	-h | --help)    print_help;        exit 0;;
	-V | --version) print_version;     exit 0;;
	--debug)         DEBUG="--debug"; 
	                 VERBOSE="--verbose";; 	   
	-v | --verbose)  VERBOSE="--verbose";; 	    
 	-n | --dry-run)  SIMULATION="--dry-run";;
        *) REPOSITORY=$1;;
    esac
    shift
done

[ -z "${REPOSITORY}" ] && print_error_and_exit "No repository precised (use 'debian' or 'debian-security' typically)"
verbose "setting ftpsync to synchronize the ${REPOSITORY} repository"
config_file=${DEBMIRROR_HOMEDIR}/etc/ftpsync.${REPOSITORY}.conf


[ ! -f ${FTPSYNC} ]     && print_error_and_exit "missing script ${FTPSYNC} -- see http://www.debian.org/mirror/ftpmirror for setup"
[ ! -d "${DEBMIRROR_HOMEDIR}/etc" ] && print_error_and_exit "missing directory ${DEBMIRROR_HOMEDIR}/etc" 
[ ! -f $config_file ]   && print_error_and_exit "missing ftpsync config file $config_file"
if [ -e ${FTPSYNC_CFG} ]; then 
	[ ! -h ${FTPSYNC_CFG} ] && print_error_and_exit "${FTPSYNC_CFG} is already present but not a symbolic link whereas this script will make use of symbolic link to the $config_file"
fi
verbose "ensure user ${DEBMIRROR_USER} exists"
execute "id ${DEBMIRROR_USER} 1>/dev/null"
[ $? -ne 0 ] && print_error_and_exit "The user ${DEBMIRROR_USER} doesn't exist"

execute "cd ${DEBMIRROR_HOMEDIR}/etc"

verbose "setting symbolic link ${FTPSYNC_CFG} (to $config_file)"
execute "ln -sf $config_file ${FTPSYNC_CFG}"

verbose "running ${FTPSYNC} (sync:all mode ) using the configuration file ${FTPSYNC_CFG}"
execute "sudo -u ${DEBMIRROR_USER} BASEDIR=${DEBMIRROR_HOMEDIR} ${FTPSYNC} sync:all"
if [ $? -ne 0 ]; then 
    error "synchronization failed -- see the log files:"
    error "    - ${DEBMIRROR_HOMEDIR}/log/ftpsync.log.0"
    error "    - ${DEBMIRROR_HOMEDIR}/log/rsync-ftpsync.error.0"
fi

